{"name":"libjson-rpc-cpp","tagline":"C++ framework for json-rpc (json remote procedure call)","body":"[![Build Status](https://travis-ci.org/cinemast/libjson-rpc-cpp.png?branch=master)](https://travis-ci.org/cinemast/libjson-rpc-cpp)\r\n\r\nlibjson-rpc-cpp\r\n===============\r\n\r\nThis C++ library provides a json-rpc (remote procedure call) framework for Linux and MacOS (or any other UNIX derivate).\r\nIt is fully JSON-RPC 2.0 compatible ([JSON-RPC 2.0](http://www.jsonrpc.org/specification)) and provides additional features, such as generic authentication mechanisms.\r\n\r\n**Notice: This framework is currently in a beta phase. Bug Reports are very welcome!**\r\n\r\n![libjson-rpc-cpp logo](https://github.com/cinemast/libjson-rpc-cpp/blob/master/dev/artwork/logo.png?raw=true)\r\n\r\n5 good reasons for using libjson-rpc-cpp in your next RPC project:\r\n---------\r\n- Full JSON-RPC 2.0 Support (batch requests, parameter type and name checking, ...).\r\n- jsonrpcstub: Generates automatically C++ stub-classes for your json-rpc client AND server.\r\n- Embedded HTTP server to provide simple interfaces for your json-rpc server application.\r\n- Embedded HTTP client to connect easily via HTTP protocol.\r\n- Super liberal [MIT-License](http://en.wikipedia.org/wiki/MIT_License). \r\n\r\n**Other good reasons to use libjson-rpc-cpp**\r\n- Easy to use.\r\n- Method parameter names and checks can be easily configured through a simple json configuration file.\r\n- Very verbose error reporting.\r\n- Easy to use [cmake](http://www.cmake.org) cross platform build system.\r\n- Clean and simple architecture.\r\n- Tested under MacOS X (10.7,10.8), Linux (Debian 8 64-bit).\r\n- Tested under RaspberryPi (raspbian). This library offers great opportunities to remotely control your raspberry pi.\r\n- Automated testing using `make test`\r\n- Useful Examples provided. e.g. XBMC Remote using json-rpc client part and stub generator.\r\n\r\n Overview\r\n ---------\r\n ![libjson-rpc-cpp logo](https://github.com/cinemast/libjson-rpc-cpp/blob/develop/dev/artwork/overview.png?raw=true)\r\n \r\nBuild the framework\r\n------------------\r\n\r\nYou will need [Git](http://git-scm.com/downloads) and [CMake](http://www.cmake.org/cmake/resources/software.html). You can click on the links to download the latest versions. [libcurl](http://curl.haxx.se/libcurl/) is also required but should already be installed on most systems.\r\nCMake must be Version 2.6 or later.\r\n\r\nUnder Debian based systems type:\r\n\r\n```sh\r\nsudo apt-get install libcurl4-openssl-dev libjsoncpp-dev libargtable2-dev libboost-test-dev cmake\r\n```\r\n\r\nOpen a terminal and copy the following commands:\r\n\r\n```sh\r\ngit clone git://github.com/cinemast/libjson-rpc-cpp.git\r\nmkdir -p libjson-rpc-cpp/build\r\ncd libjson-rpc-cpp/build\r\ncmake .. && make\r\nsudo make install \t#Not required, but makes it easier to use\r\nsudo ldconfig\t\t#only required for linux\r\n```\r\nThat's it!\r\n\r\nIf you are not happy with it, simply uninstall it from your system using (inside the build the directory):\r\n```sh\r\nsudo make uninstall\r\n```\r\n**Build options:**\r\n- `-DCOMPILE_TESTS=NO` disables unit test suite.\r\n- `-DCOMPILE_STUBGEN=NO` disables building the stubgenerator.\r\n- `-DCOMPILE_EXAMPLES=NO` disables examples.\r\n- `-DHTTP_SERVER_MONGOOSE=NO` disable the embedded mongoose webserver.\r\n- `-DHTTP_CLIENT_CURL=NO` disable the curl client.\r\n- `-DSOCKET_SERVER=YES` enable the socket server.\r\n- `-DSOCKET_CLIENT=YES` enable the socket client.\r\n\r\nSimple Example\r\n---------------\r\nThis example will show the most simple way to create a rpc server and client. If you only need the server, ignore step 4. If you only need the client, ignore step 3. You can find all resources of this sample in the `src/examples` directory of this repository.\r\n\r\n### Step 1: Writing the specification file ###\r\n\r\n```json\r\n[\r\n\t{\r\n\t\t\"name\": \"sayHello\",\r\n\t\t\"params\": { \r\n\t\t\t\"name\": \"Peter\"\r\n\t\t},\r\n\t\t\"returns\" : \"Hello Peter\"\r\n\t},\r\n\t{\r\n\t\t\"name\" : \"notifyServer\",\r\n\t\t\"params\": null\r\n\t}\r\n]\r\n```\r\n\r\nThe type of a return value or parameter is defined by the literal assigned to it. In this example you can see how to specify methods and notifications.\r\n\r\n### Step 2: Generate the stubs for client and server ###\r\n\r\nCall jsonrpcstub:\r\n```sh\r\njsonrpcstub spec.json --cpp-server=AbstractStubServer --cpp-client=StubClient\r\n```\r\n\r\nThis generates a serverstub and a clientstub class.\r\n\r\n\r\n### Step 3: implement the abstract server stub ###\r\n\r\nExtend the abstract server stub and implement all pure virtual (abstract) methods defined in `spec.json`.\r\n\r\n```cpp\r\n#include \"abstractsubserver.h\"\r\n#include <jsonrpccpp/server/connectors/httpserver.h>\r\n\r\nusing namespace jsonrpc;\r\nusing namespace std;\r\n\r\nclass MyStubServer : public AbstractStubServer\r\n{\r\n    public:\r\n        MyStubServer(AbstractServerConnector &connector);\r\n\r\n        virtual void notifyServer();\r\n        virtual std::string sayHello(const std::string& name);\r\n};\r\n\r\nMyStubServer::MyStubServer(AbstractServerConnector &connector) :\r\n    AbstractStubServer(connector)\r\n{\r\n}\r\nvoid MyStubServer::notifyServer()\r\n{\r\n    cout << \"Server got notified\" << endl;\r\n}\r\nstring MyStubServer::sayHello(const string &name)\r\n{\r\n    return \"Hello \" + name;\r\n}\r\n\r\nint main()\r\n{\r\n    HttpServer httpserver(8383);\r\n    MyStubServer s(httpserver);\r\n    s.StartListening();\r\n    getchar();\r\n    s.StopListening();\r\n    return 0;\r\n}\r\n```\r\n\r\nIn the main function the concrete server is instantiated and started. That is all for the server. Any JSON-RPC 2.0 compliant client can now connect to your server.\r\n\r\nCompile the server with:\r\n\r\n```sh\r\ng++ main.cpp -ljsonrpccppserver -o sampleserver\r\n```\r\n\r\n### Step 4: Create the client application\r\n```cpp\r\n#include <iostream>\r\n\r\n#include \"stubclient.h\"\r\n#include <jsonrpccpp/client/connectors/httpclient.h>\r\n\r\nusing namespace jsonrpc;\r\nusing namespace std;\r\n\r\nint main()\r\n{\r\n    HttpClient httpclient(\"http://localhost:8383\");\r\n    StubClient c(httpclient);\r\n    try\r\n    {\r\n        cout << c.sayHello(\"Peter Knafl\") << endl;\r\n        c.notifyServer();\r\n    }\r\n    catch (JsonRpcException e)\r\n    {\r\n        cerr << e.what() << endl;\r\n    }\r\n}\r\n```\r\n\r\nCompile the client with:\r\n\r\n```sh\r\ng++ main.cpp -ljsonrpccppclient -o sampleclient\r\n```\r\n\r\nReferences\r\n-------------\r\n- [NASA Ames Research Center](http://www.nasa.gov/centers/ames/home/): use it to obtain aircraft state information from an aircraft simulator.\r\n- [LaseShark 3D Printer](https://github.com/macpod/lasershark_3dp): used to control the firmware of the 3D printer.\r\n- [cpp-ethereum](https://github.com/ethereum/cpp-ethereum): a distributed computing framework.\r\n- [mage-sdk-cpp](https://github.com/mage/mage-sdk-cpp): a game engine.\r\n- [bitcodin](http://www.bitmovin.net): a scaleable cloud based video transcoding platform.\r\n\r\nIf you use this library and find it useful, I would be very pleased if you let me know about it.\r\n\r\nRoadmap for next release\r\n------------------------\r\n- JSON RPC 1 legacy support\r\n- libmicrohttpd server connector (to replace mongoose, because of license issues)\r\n- Generate client stubs for other languages.\r\n\r\nChangelogs\r\n----------\r\nChangelogs can be found [here](https://github.com/cinemast/libjson-rpc-cpp/blob/master/CHANGELOG.md).\r\n\r\nKnown issues\r\n-------------\r\n- Due to a bug in gcc 4.6.2 this project is not compiling under Mac OS gcc. Use clang++ instead. [See here](http://stackoverflow.com/questions/8887864/template-base-constructor-call-in-member-initialization-list-error)\r\n\r\nLicsense\r\n--------\r\nThis framework is licensed under [MIT](http://en.wikipedia.org/wiki/MIT_License).\r\n\r\n\r\nDependencies\r\n---------------\r\n\r\n- [jsoncpp](http://jsoncpp.sourceforge.net) (licensed under MIT)\r\njsoncpp is a very easy to use and powerful json library. \r\nIt is used for all the JSON parsing and generation inside this library.\r\n- [mongoose](https://github.com/valenok/mongoose) (licensed under MIT)\r\nmongoose is a http server that can be easily embedded into other applications. \r\nIt is used here for the HttpConnector to provide HTTP json-rpc Requests.\r\n- [curl](http://curl.haxx.se)\r\nlib curl is used for the HttpClient connections.\r\n- [argtable2](http://argtable.sourceforge.net/) (licensed under LGPL)\r\nlibargtable2 is used for handling commandline parameters of the jsonrpcstub tool.\r\n","google":"UA-25068518-5","note":"Don't delete this file! It's used internally to help with page regeneration."}